% Each new term in the Fibonacci sequence is generated by adding the previous two terms. By starting with 1 and 2, the first 10 terms will be:
% 1, 2, 3, 5, 8, 13, 21, 34, 55, 89, ...
% By considering the terms in the Fibonacci sequence whose values do not exceed four million, find the sum of the even-valued terms.

-module(problem0002).
-export([solve/1, start/1]).
-include_lib("eunit/include/eunit.hrl").

start(Limit) when is_list(Limit) ->
    io:format("The sum of all even Fibonacci numbers under 4,000,000 is: ~p~n", [solve(list_to_integer(Limit))]).

solve(Limit) ->
    lists:foldl(fun(X,Sum) -> if X rem 2 == 0 -> X+Sum; true -> Sum end end, 0, fib(Limit)).

fib(Limit) -> fib([1,0], Limit).
fib([A,B|Tail], Limit) 
  when A + B < Limit -> fib([A+B, A, B | Tail], Limit);
fib(List, _) -> lists:reverse(List).

solve_100_test() ->
    ?assertEqual(44, solve(100)).
solve_20_test() ->
    ?assertEqual(10, solve(20)).
fibonaccis_less_than_100_test() ->
    ?assertEqual([0,1,1,2,3,5,8,13,21,34,55,89], fib(100)).
fibonaccis_less_than_20_test() ->
    ?assertEqual([0,1,1,2,3,5,8,13], fib(20)).
solve_4000000_test() ->
    ?assertEqual(4613732, solve(4000000)).

