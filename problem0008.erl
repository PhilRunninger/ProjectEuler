% The four adjacent digits in the 1000-digit number that have the greatest product are 9 × 9 × 8 × 9 = 5832.
% Find the thirteen adjacent digits in the 1000-digit number that have the greatest product. What is the value of this product?

-module(problem0008).
-export([solve/1]).
-include_lib("eunit/include/eunit.hrl").

solve(Length) ->
    Digits = "7316717653133062491922511967442657474235534919493496983520312774506326239578318016984801869478851843858615607891129494954595017379583319528532088055111254069874715852386305071569329096329522744304355766896648950445244523161731856403098711121722383113622298934233803081353362766142828064444866452387493035890729629049156044077239071381051585930796086670172427121883998797908792274921901699720888093776657273330010533678812202354218097512545405947522435258490771167055601360483958644670632441572215539753697817977846174064955149290862569321978468622482839722413756570560574902614079729686524145351004748216637048440319989000889524345065854122758866688116427171479924442928230863465674813919123162824586178664583591245665294765456828489128831426076900422421902267105562632111110937054421750694165896040807198403850962455444362981230987879927244284909188845801561660979191338754992005240636899125607176060588611646710940507754100225698315520005593572972571636269561882670428252483600823257530420752963450",
    [{Answer,Multiplicands}|_Tail] = lists:reverse(lists:keysort(1,products(Length, Digits))),
    io:format("The answer is ~p, the product of: ~p~n", [Answer, Multiplicands]),
    Answer.

product(Digits) ->
    lists:foldl(fun(Digit, Acc) -> (Digit - $0) * Acc end, 1, Digits).

substrings(Length, Digits) ->
    lists:map(fun(Start) -> string:substr(Digits, Start, Length) end, 
              lists:seq(1,length(Digits)-Length+1)).

products(Length, Digits) ->
    lists:map(fun(SubString) -> {product(SubString), SubString} end, substrings(Length, Digits)).

primes_test_() ->
    [
        ?_assertEqual(540, product("4593"))
       ,?_assertEqual(180, product("459"))
       ,?_assertEqual(["12", "23"], substrings(2,"123"))
       ,?_assertEqual(["123", "234", "345"], substrings(3,"12345"))
       ,?_assertEqual([ {2,"12"}, {6,"23"} ], products(2,"123"))
       ,?_assertEqual([ {6,"123"}, {24,"234"}, {60,"345"} ], products(3,"12345"))
       ,?_assertEqual(5832, solve(4))
       ,?_assertEqual(9, solve(1))
    ].
